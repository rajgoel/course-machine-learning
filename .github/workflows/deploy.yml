name: Deploy slides and Julia docs

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  docs:
    name: Deploy slides and Julia docs
    runs-on: ubuntu-latest
    permissions:
      contents: write
      statuses: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history to check for changes
      
      - name: Check for Julia changes
        id: julia-changes
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -q '^julia/'; then
            echo "julia_changed=true" >> $GITHUB_OUTPUT
            echo "üìù Julia files have changed - will rebuild docs"
          else
            echo "julia_changed=false" >> $GITHUB_OUTPUT
            echo "üìÑ No Julia changes - will preserve existing docs"
          fi
      
      - uses: julia-actions/setup-julia@v1
        if: steps.julia-changes.outputs.julia_changed == 'true'
        with:
          version: '1.11'
      
      - uses: julia-actions/cache@v1
        if: steps.julia-changes.outputs.julia_changed == 'true'
      
      - name: Configure git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
      
      - name: Install dependencies
        if: steps.julia-changes.outputs.julia_changed == 'true'
        run: |
          # Only install docs dependencies (Documenter.jl)
          julia --project=julia/docs -e 'using Pkg; Pkg.instantiate()'
          # Add the local package for docstring extraction only
          julia --project=julia/docs -e 'using Pkg; Pkg.develop(PackageSpec(path="julia"))'
      
      - name: Build docs
        if: steps.julia-changes.outputs.julia_changed == 'true'
        run: |
          cd julia/docs
          julia --project=. make.jl
          
      - name: Save built docs
        if: steps.julia-changes.outputs.julia_changed == 'true'
        run: |
          # Copy built docs using absolute path
          if cp -r julia/docs/build /tmp/docs-build; then
            echo "‚úÖ Successfully copied built docs to /tmp/docs-build"
            echo "Contents of /tmp/docs-build:"
            ls -la /tmp/docs-build/
          else
            echo "‚ùå Failed to copy built docs"
            echo "Checking if julia/docs/build exists:"
            ls -la julia/docs/build/ || echo "julia/docs/build directory does not exist"
            exit 1
          fi
      
      - name: Deploy to gh-pages
        run: |
          # If Julia didn't change, preserve existing docs from gh-pages
          if [ "${{ steps.julia-changes.outputs.julia_changed }}" = "false" ]; then
            # Fetch existing docs from gh-pages branch
            git fetch origin gh-pages:gh-pages-backup 2>/dev/null || echo "No existing gh-pages branch"
            if git show gh-pages-backup:julia/docs/build/index.html > /dev/null 2>&1; then
              git checkout gh-pages-backup -- julia/docs/build/ 2>/dev/null || echo "Could not checkout docs"
              if [ -d "julia/docs/build" ]; then
                cp -r julia/docs/build /tmp/preserved-docs
                echo "üì¶ Preserved existing docs from gh-pages"
              fi
            else
              echo "üì≠ No existing docs found to preserve"
            fi
          fi
          
          # Copy main branch content to gh-pages (for RevealJS)
          git checkout --orphan gh-pages-temp
          git rm -rf .
          
          # Copy all main branch files except .git
          git checkout main -- .
          
          # Remove julia/docs/build if it exists (we'll add correct one)
          rm -rf julia/docs/build
          
          # Restore docs: either newly built or preserved
          mkdir -p julia/docs/build
          
          if [ "${{ steps.julia-changes.outputs.julia_changed }}" = "true" ]; then
            if cp -r /tmp/docs-build/* julia/docs/build/; then
              echo "‚úÖ Deployed newly built docs"
              echo "Contents of julia/docs/build:"
              ls -la julia/docs/build/
            else
              echo "‚ùå Failed to copy newly built docs"
              exit 1
            fi
          elif [ -d "/tmp/preserved-docs" ]; then
            if cp -r /tmp/preserved-docs/* julia/docs/build/; then
              echo "‚úÖ Restored preserved docs"
              echo "Contents of julia/docs/build:"
              ls -la julia/docs/build/
            else
              echo "‚ùå Failed to restore preserved docs"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è No docs to deploy (no existing docs and no Julia changes)"
          fi
          
          # Configure git and commit
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          
          # Debug: Check what's actually there before git add
          echo "=== Files in julia/docs/build before git add ==="
          ls -la julia/docs/build/ || echo "Directory missing"
          
          # Check if .gitignore is blocking build directories
          echo "=== Checking .gitignore ==="
          cat .gitignore | grep -i build || echo "No build rules in .gitignore"
          
          git add .
          
          # Debug: What did git actually stage?
          echo "=== Git status after git add ==="
          git status --porcelain
          
          # Force add build directory (ignore .gitignore)
          git add julia/docs/build/ --force
          
          git commit -m "Deploy slides and Julia docs"
          
          # Force push to gh-pages
          git push -f origin gh-pages-temp:gh-pages
